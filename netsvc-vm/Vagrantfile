# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "openindiana/hipster"

  config.vm.network "private_network", ip: "192.168.122.3", auto_config: false
  # If you need to boot RPI or other devices in your hosts network use this line instead of the
  # private_network line above
  # Adjsut IP address as needed and dhcp config aswell
  # config.vm.network "public_network", ip: "$YOUR_EXTERNAL_IP_HERE", auto_config: false

  # Unless OpenIndiana is better supported in vagrant, we have to use this
    # workaround. The problem with vagrant is that it creates folder as root:root,
    # but rsync connects as vagrant and thus fails to write.
  config.vm.synced_folder ".", "/vagrant", type: "rsync",
    rsync__args: ["--verbose", "--archive", "-zz", "--copy-links"],
    rsync__rsync_path: "pfexec rsync", owner: "vagrant", group: "vagrant",
    rsync__exclude: ["output/proto/root_aarch64/", "output/proto/root_alpha/", "output/proto/root_riscv64/", ".vagrant/"]

    # Autoconfigure resources for development VM. The snippet is taken from
    # https://stefanwrobel.com/how-to-make-vagrant-performance-not-suck.
    # We allocate 1/4 of available system memory and CPU core count of the host
    # to the VM, so performance does not suck.
    host = RbConfig::CONFIG['host_os']

    # Get memory size and CPU cores amount
    if host =~ /solaris/
      mem = `/usr/sbin/prtconf|grep Memory|cut -f3 -d' '`.to_i * 1024 * 1024
      cpus = `/usr/sbin/psrinfo|wc -l`.to_i
    elsif host =~ /darwin/
      # sysctl returns Bytes
      mem = `sysctl -n hw.memsize`.to_i
      cpus = `sysctl -n hw.ncpu`.to_i
    elsif host =~ /linux/
      # meminfo shows size in kB; convert to Bytes
      mem = `awk '/MemTotal/ {print $2}' /proc/meminfo`.to_i * 1024
      cpus = `getconf _NPROCESSORS_ONLN`.to_i
    elsif host =~ /mswin|mingw|cygwin/
      # Windows code via https://github.com/rdsubhas/vagrant-faster
      mem = `wmic computersystem Get TotalPhysicalMemory`.split[1].to_i
      cpus = `echo %NUMBER_OF_PROCESSORS%`.to_i
    else
      puts "Unsupported operating system"
      exit
    end

  # Give VM 1/4 system memory as well as CPU core count
  mem /= 1024 ** 2 * 4
  cpus /= 4

  config.vm.provider :libvirt do |libvirt|
    libvirt.memory = mem
    libvirt.cpus = cpus
  end

  config.vm.provision "shell", inline: <<-SHELL
    set -ex
    pfexec chown -R vagrant:vagrant /vagrant
    pfexec pkg install -v service/network/dhcp/isc-dhcp service/network/tftp || 0
    
    pfexec mkdir -p /etc/dhcpd.d
    pfexec cp /vagrant/dhcpd.main.conf /etc/inet/dhcpd4.conf
    pfexec cp /vagrant/dhcpd-foundation.conf /etc/dhcpd.d/
    pfexec cp /vagrant/dhcpd-illumos.conf /etc/dhcpd.d/

    pfexec ipadm create-addr -T static -a "192.168.122.3/24" vioif1/v4

    pfexec zfs create rpool/export/root_aarch64
    pfexec zfs set sharenfs=ro,root=@192.168.122.0/24 rpool/export/root_aarch64
    pfexec gtar -C /export/root_aarch64/ -xaf /vagrant/output/proto/illumos-*-aarch64.tar.gz
    pfexec ln -s /export/ /tftpboot

    pfexec svcadm enable svc:/network/dhcp/server:ipv4
    pfexec svcadm enable svc:/network/tftp/udp6:default
    pfexec svcadm enable svc:/network/nfs/server:default
  SHELL
end
